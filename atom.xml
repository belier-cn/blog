<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://blog.belier.cn</id>
    <title>Blog</title>
    <updated>2019-12-30T09:40:11.430Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://blog.belier.cn"/>
    <link rel="self" href="https://blog.belier.cn/atom.xml"/>
    <logo>https://blog.belier.cn/images/avatar.png</logo>
    <icon>https://blog.belier.cn/favicon.ico</icon>
    <rights>All rights reserved 2019, Blog</rights>
    <entry>
        <title type="html"><![CDATA[Centos7 安装 Docker Compose]]></title>
        <id>https://blog.belier.cn/post/5s9MHRIqC</id>
        <link href="https://blog.belier.cn/post/5s9MHRIqC">
        </link>
        <updated>2019-12-27T11:50:12.000Z</updated>
        <content type="html"><![CDATA[<ol>
<li>
<p>下载 Docker Compose 二进制文件</p>
<pre><code class="language-bash">curl -L &quot;https://github.com/docker/compose/releases/download/1.25.0/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose
</code></pre>
</li>
<li>
<p>给与文件可执行权限</p>
<pre><code class="language-bash">chmod +x /usr/local/bin/docker-compose
</code></pre>
</li>
<li>
<p>检测是否可用</p>
<pre><code class="language-bash">docker-compose --version
</code></pre>
</li>
</ol>
<p>参考：<a href="https://docs.docker.com/compose/install/#install-compose">Docker compose 官方文档</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[使用 Docker Compose 运行 Jenkins]]></title>
        <id>https://blog.belier.cn/post/KTJDkKiKZ</id>
        <link href="https://blog.belier.cn/post/KTJDkKiKZ">
        </link>
        <updated>2019-12-27T11:13:12.000Z</updated>
        <content type="html"><![CDATA[<ol>
<li>
<p>创建 docker-compose.yml 文件</p>
<pre><code class="language-yml"> version: '3'
 services:
 jenkins:
     user: root
     restart: always
     image: jenkins/jenkins:lts
     container_name: jenkins
     ports:
         - '3000:8080'
     volumes:
         - /usr/local/jenkins/jenkins_home/:/var/jenkins_home
         - /var/run/docker.sock:/var/run/docker.sock
         - /usr/bin/docker:/usr/bin/docker
         - /usr/local/bin/docker-compose:/usr/local/bin/docker-compose
</code></pre>
<p>使用 Docker Compose 主要是因为直观</p>
</li>
<li>
<p>启动</p>
<pre><code class="language-bash">docker-compose up -d
</code></pre>
</li>
<li>
<p>获取首次登陆密码</p>
<pre><code class="language-bash">docker exec -it jenkins cat /var/jenkins_home/secrets/initialAdminPassword
</code></pre>
</li>
<li>
<p>加速插件下载<br>
参考：<a href="/post/e5hc2h3EA">Jenkins 使用镜像加速插件下载速度</a></p>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Jenkins 使用镜像加速插件下载速度]]></title>
        <id>https://blog.belier.cn/post/e5hc2h3EA</id>
        <link href="https://blog.belier.cn/post/e5hc2h3EA">
        </link>
        <updated>2019-12-27T08:40:14.000Z</updated>
        <content type="html"><![CDATA[<p>安装 localization-zh-cn-plugin 插件，然后按下图操作即可</p>
<figure data-type="image" tabindex="1"><img src="https://blog.belier.cn/post-images/1577436279003.jpg" alt="" loading="lazy"></figure>
<p>参考：<a href="https://community.jenkins-zh.cn/t/jenkins/26">Jenkins 中文社区</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vagrant 创建 root 账号免密登录的 Centos7]]></title>
        <id>https://blog.belier.cn/post/8_PzWhqus</id>
        <link href="https://blog.belier.cn/post/8_PzWhqus">
        </link>
        <updated>2019-12-26T11:37:04.000Z</updated>
        <content type="html"><![CDATA[<ol>
<li>
<p>创建 Cenetos7 创建成功后执行的脚本，与 Vagrantfile 同级<br>
vagrant 默认是使用 vagrant 用户免密登录的，所以需要将 vagrant 用户免密登录的公钥拷贝到 root用户下就可以了</p>
<pre><code class="language-bash">#!/bin/bash

#安装 expect 用于切换 root 用户
sudo yum install -y expect

#创建拷贝 authorized_keys 脚本
sh_str=&quot;#!/bin/sh\ndata=\$(cat /home/vagrant/.ssh/authorized_keys)\nmkdir -p /root/.ssh\necho \${data} &gt; /root/.ssh/authorized_keys&quot;
sudo echo -e ${sh_str} &gt; /home/vagrant/root.sh
sudo chmod 777 /home/vagrant/root.sh

#切换到 root 用户执行拷贝 authorized_keys
expect -c &quot;
spawn su root
expect \&quot;Password:\&quot;
send \&quot;vagrant\n\&quot;
expect &quot;#&quot;
send \&quot;sh /home/vagrant/root.sh\n\&quot;
expect &quot;#&quot;
send \&quot;rm -f /home/vagrant/root.sh\n\&quot;
&quot;
</code></pre>
</li>
<li>
<p>配置Vagrantfile</p>
<pre><code class="language-ruby"># -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.require_version &quot;&gt;= 1.6.0&quot;

Vagrant.configure(2) do |config|
# 配置创建成功后执行的脚本（只在第一次创建成功后执行），以上省略
config.vm.provision &quot;shell&quot;, path: &quot;./setup.sh&quot;
end
</code></pre>
</li>
<li>
<p>root 用户免密登录</p>
<p>使用 .vagrant\machines\default\virtualbox\private_key 私钥登录即可</p>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[使用 Dokcer 运行 Nginx]]></title>
        <id>https://blog.belier.cn/post/W9ICrn2gc</id>
        <link href="https://blog.belier.cn/post/W9ICrn2gc">
        </link>
        <updated>2019-12-26T02:36:19.000Z</updated>
        <content type="html"><![CDATA[<ol>
<li>创建用于放 nginx 配置文件的目录</li>
</ol>
<pre><code># 顺带创建一个存放证书的目录
mkdir -p /usr/local/nginx/ssl
</code></pre>
<ol start="2">
<li>先运行一个 nginx 容器，拷贝出默认的配置文件</li>
</ol>
<pre><code>docker run -d  --name nginx nginx
docker cp nginx:/etc/nginx/nginx.conf /usr/local/nginx/nginx.conf
docker cp nginx:/etc/nginx/conf.d /usr/local/nginx/conf.d
</code></pre>
<ol start="3">
<li>销毁 nginx 容器</li>
</ol>
<pre><code>docker rm -f nginx
</code></pre>
<ol start="4">
<li>正式运行 nginx 容器</li>
</ol>
<pre><code>docker run -d -p 80:80 -p 443:443 --name nginx \
-v /usr/local/nginx/nginx.conf:/etc/nginx/nginx.conf \
-v /usr/local/nginx/conf.d:/etc/nginx/conf.d \
-v /usr/local/nginx/ssl/:/etc/nginx/ssl nginx
</code></pre>
<ol start="5">
<li>防火墙放行 80 443 端口</li>
</ol>
<pre><code>firewall-cmd --permanent --zone=public --add-port=80/tcp 
firewall-cmd --permanent --zone=public --add-port=443/tcp 
# 重新加载防护墙配置
firewall-cmd --reload
</code></pre>
<ol start="6">
<li>测试<br>
访问主机的ip，查看是否有 nginx 的欢迎页面</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Centos7 安装 netstat]]></title>
        <id>https://blog.belier.cn/post/ip3oNK0we</id>
        <link href="https://blog.belier.cn/post/ip3oNK0we">
        </link>
        <updated>2019-12-26T02:26:03.000Z</updated>
        <content type="html"><![CDATA[<p>安装</p>
<pre><code class="language-bash">yum install -y net-tools
</code></pre>
<p>net-tools 包含如下命令</p>
<pre><code class="language-bash">ifconfig
route
netstat
arp
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[firewall 防火墙常用命令]]></title>
        <id>https://blog.belier.cn/post/QEOCgjJCH</id>
        <link href="https://blog.belier.cn/post/QEOCgjJCH">
        </link>
        <updated>2019-12-26T02:20:25.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li>开启防火墙</li>
</ul>
<pre><code class="language-bash">systemctl start firewalld.service
</code></pre>
<ul>
<li>关闭防火墙</li>
</ul>
<pre><code class="language-bash">systemctl stop firewalld.service
</code></pre>
<ul>
<li>开机自动启动</li>
</ul>
<pre><code class="language-bash">systemctl enable firewalld.service
</code></pre>
<ul>
<li>关闭开机自动启动</li>
</ul>
<pre><code class="language-bash">systemctl disable firewalld.service
</code></pre>
<ul>
<li>查看状态</li>
</ul>
<pre><code class="language-bash">systemctl status firewalld
</code></pre>
<ul>
<li>重新加载配置</li>
</ul>
<pre><code class="language-bash">firewall-cmd --reload
</code></pre>
<ul>
<li>临时启用某个服务</li>
</ul>
<pre><code class="language-bash">firewall-cmd --zone=public --add-service=https
</code></pre>
<ul>
<li>永久启用某个服务</li>
</ul>
<pre><code class="language-bash">firewall-cmd --permanent --zone=public --add-service=https
</code></pre>
<ul>
<li>临时开启某个端口</li>
</ul>
<pre><code class="language-bash">firewall-cmd  --zone=public --add-port=8080/tcp 
</code></pre>
<ul>
<li>永久开启某个端口</li>
</ul>
<pre><code class="language-bash">firewall-cmd --permanent --zone=public --add-port=8080/tcp 
</code></pre>
<ul>
<li>手动修改服务和端口配置</li>
</ul>
<pre><code class="language-bash">vi  /etc/firewalld/zones/public.xml
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Centos7 开启密码登录和 root 用户远程登录]]></title>
        <id>https://blog.belier.cn/post/OtovyDLsE</id>
        <link href="https://blog.belier.cn/post/OtovyDLsE">
        </link>
        <updated>2019-12-26T01:31:22.000Z</updated>
        <content type="html"><![CDATA[<h2 id="开启密码登录">开启密码登录</h2>
<ol>
<li>编辑配置文件<br>
vi /etc/ssh/sshd_config<pre><code class="language-bash">PasswordAuthentication yes
</code></pre>
</li>
<li>重启 SSH 服务<pre><code class="language-bash">systemctl restart sshd
</code></pre>
</li>
</ol>
<h2 id="开启-root-用户远程登录">开启 root 用户远程登录</h2>
<ol>
<li>编辑配置文件<br>
vi /etc/ssh/sshd_config<pre><code class="language-bash">PermitRootLogin yes
</code></pre>
</li>
<li>重启 SSH 服务<pre><code class="language-bash">systemctl restart sshd
</code></pre>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Linux 学习之 SSH]]></title>
        <id>https://blog.belier.cn/post/RtxLs1CO1</id>
        <link href="https://blog.belier.cn/post/RtxLs1CO1">
        </link>
        <updated>2019-09-11T15:07:12.000Z</updated>
        <content type="html"><![CDATA[<h2 id="什么是-ssh">什么是 SSH</h2>
<p>Secure Shell（安全外壳协议，简称SSH）是一种加密的网络传输协议，可在不安全的网络中为网络服务提供安全的传输环境。SSH通过在网络中创建安全隧道来实现SSH客户端与服务器之间的连接<br>
来自维基百科 <a href="https://zh.wikipedia.org/wiki/Secure_Shell">Secure Shell (SSH)</a></p>
<h2 id="ssh-服务端">SSH 服务端</h2>
<p>SSH 服务端就是一个守护进程，后台运行，响应客户端的请求</p>
<ul>
<li>centos 安装：</li>
</ul>
<pre><code class="language-sh">yum install -y openssh-server
</code></pre>
<blockquote>
<p>一般都会默认安装的，图形化的 linux 系统一般没有</p>
</blockquote>
<ul>
<li>服务相关命令</li>
</ul>
<pre><code>systemctl start sshd      #启动
systemctl stop sshd      #关闭
systemctl restart sshd   #重启
systemctl enable sshd   #开机自启
systemctl disable sshd  #关闭开机自启
systemctl status sshd    #查看状态
</code></pre>
<h2 id="ssh-客户端">SSH 客户端</h2>
<ul>
<li>centos 安装</li>
</ul>
<pre><code>yum install -y openssh-client
</code></pre>
<blockquote>
<p>安装了服务端，默认就会安装客户端</p>
</blockquote>
<ul>
<li>windows 下的 SSH 客户端</li>
</ul>
<p>securecrt xshell ... 应用程序，都是可视化操作，比较简单</p>
<h2 id="连接服务端">连接服务端</h2>
<h3 id="密码登录">密码登录</h3>
<pre><code class="language-sh">ssh user@host -p port
# 或者
ssh -i ~/.ssh/id_rsa -p port -l user host
</code></pre>
<p>user ：用户名，例如：root<br>
host : 主机地址，例如：192.168.0.100<br>
-p : 端口，不指定默认 22<br>
-i : 证书文件，默认 ~/.ssh/id_rsa ，如果用免密登录才需要<br>
-l : 用户名</p>
<h3 id="免密登录">免密登录</h3>
<p>假设 A 要访问 B ,就得在 A 服务器上生成一对秘钥，将生成的公钥配置到 B 服务器</p>
<ul>
<li>生成秘钥（私钥+公钥）<br>
window 可以使用软件生成，这里说说 linux 生成</li>
</ul>
<pre><code># 在当前目录生成，这里在 ~/.ssh 目录
ssh-keygen –t rsa -f belier -P &quot;&quot;
</code></pre>
<p>-t : 使用什么加密方式，默认 rsa，一般有 rsa dsa esdsa ...<br>
-f : 设置文件名称，默认文件名：id_rsa，如果不指定会提示输入，不输入直接回车还是会使用默认文件名<br>
-P : 秘钥的密码，&quot;&quot; 就是不设置密码</p>
<ul>
<li>配置公钥<br>
将生 ~/.ssh/{name}.pub 拷贝到 B 服务器的 ~/.ssh/authorized_keys 文件中<br>
输出公钥内容</li>
</ul>
<pre><code>cat ~/.ssh/{name}.pub
</code></pre>
<p>如果没有  ~/.ssh/authorized_keys 文件，使用如下命令创建</p>
<pre><code>touch ~/.ssh/authorized_keys
</code></pre>
<p>配置多个公钥，可以换行进行分割</p>
<blockquote>
<p>~ 是当前用户的根目录，root 用户的根目录就是 /root ，如果想使用 root 用户免密登录，B 服务器就得切换到 root 用户</p>
</blockquote>
<ul>
<li>使用免密登录</li>
</ul>
<pre><code class="language-sh"># 我的秘钥不是默认名称，需要指定私钥文件
ssh root@192.168.10.100 -i ~/.ssh/belier
</code></pre>
<p>第一次免密登录有一个确认提示：</p>
<pre><code class="language-sh">The authenticity of host '192.168.10.100 (192.168.10.100)' can't be established.
ECDSA key fingerprint is SHA256:F1wrt2fjlZuDDTuUeNnuB10m4FifT6zQdA6moSIbQLQ.
ECDSA key fingerprint is MD5:29:ed:82:6e:3b:7c:63:86:48:91:75:df:2e:91:90:c2.
Are you sure you want to continue connecting (yes/no)?
</code></pre>
<p>主要是让你确认远程服务器信息，避免中间人劫持，发现问题就 no ,不连接</p>
<p>如果出现问题：</p>
<pre><code class="language-sh">Permission denied (publickey,gssapi-keyex,gssapi-with-mic).
</code></pre>
<p>方案：</p>
<pre><code># 编辑 /etc/ssh/sshd_config 文件
RSAAuthentication yes
PubkeyAuthentication yes
# 设置 权限
chmod 700 ~/.ssh
chmod 600 ~/.ssh/authorized_keys 
</code></pre>
<h3 id="快捷登录">快捷登录</h3>
<p>上面的登录方式要输一大串命令，我们可以通过配置文件的方式，记录登录信息，通过设置别名简化命令</p>
<p>用户配置文件，放置在 ~/.ssh/config，只有当前用户能使用<br>
系统配置文件，放置在 /etc/ssh/ssh_config，都能使用（区别于 /etc/ssh/sshd_config）</p>
<p>这里我使用 ~/.ssh/config</p>
<pre><code># 设置的别名
Host server-b
  # 主机地址
  HostName 192.168.10.100
  # 用户名
  User root
  # 私钥地址
  IdentityFile ~/.ssh/belier
  # 端口 
  Port 22 
</code></pre>
<p>使用：</p>
<pre><code class="language-sh"># 现在就简洁多了
ssh server-b
</code></pre>
<h2 id="端口更改">端口更改</h2>
<p>为了更好的保证服务器的安全性，修改默认端口还是有必要的，其它的服务最好也修改掉默认端口</p>
<p>编辑 /etc/ssh/sshd_config 文件</p>
<pre><code>Port 22
Port 2233
</code></pre>
<blockquote>
<p>最好先吧默认端口保留，避免新的端口没有配置好，导致后面连不上，等尝试能正常连接了，在将默认的端口删除</p>
</blockquote>
<p>重启服务：</p>
<pre><code>systemctl restart sshd
</code></pre>
<p>放行端口：<br>
这里使用的 firewall 防火墙</p>
<pre><code># 开放端口
firewall-cmd --permanent --zone=public --add-port=2233/tcp 
# 重启加载防火墙配置
firewall-cmd --reload
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[使用 acme.sh 和 Dokcer 快速生成通配符 ssl 证书]]></title>
        <id>https://blog.belier.cn/post/jvcfkOdjf</id>
        <link href="https://blog.belier.cn/post/jvcfkOdjf">
        </link>
        <updated>2019-09-08T12:30:18.000Z</updated>
        <summary type="html"><![CDATA[<p>acme.sh 自动 60 天更新，完美适配 Docker 简直不要太爽，赶快试试</p>
]]></summary>
        <content type="html"><![CDATA[<p>acme.sh 自动 60 天更新，完美适配 Docker 简直不要太爽，赶快试试</p>
<!-- more -->
<h2 id="acmesh-简介">acme.sh 简介</h2>
<p><a href="https://github.com/Neilpang/acme.sh">acme.sh</a> 实现了 acme 协议, 可以从 letsencrypt 生成免费的证书.</p>
<h2 id="安装-docker">安装 Docker</h2>
<p>参考我的文章：<a href="https://blog.belier.cn/post/-ZFHJzYym/">Centos7 安装 Docker</a></p>
<h2 id="创建-acmesh-容器">创建 acme.sh 容器</h2>
<pre><code class="language-sh">docker run -itd  \
--net=host \
-v /usr/local/ssl/acme.sh:/acme.sh  \
--name=acme.sh \
-v /var/run/docker.sock:/var/run/docker.sock \
neilpang/acme.sh daemon
</code></pre>
<blockquote>
<p>证书文件会生成到 /usr/local/ssl/acme.sh 中，避免配置信息以及证书的丢失<br>
将 docker.sock 文件映射到 acme.sh 容器中，是为了acme.sh 能够操作 Docker  以便将证书发布到其它容器中，如 Nginx</p>
</blockquote>
<h2 id="阿里云自动验证-dns-生成">阿里云自动验证 DNS 生成</h2>
<ol>
<li>
<p>准备一个子账号，用于访问阿里云 DNS 服务<br>
<a href="https://ram.console.aliyun.com/users/new">添加地址</a><br>
<img src="https://image.belier.cn/images/20190908204951.png" alt="" loading="lazy"></p>
</li>
<li>
<p>获取 AccessKey ID 和 AccessKeySecret<br>
<img src="https://image.belier.cn/images/20190908205802.png" alt="" loading="lazy"></p>
</li>
<li>
<p>设置 DNS 管理权限<br>
<a href="https://ram.console.aliyun.com/permissions">授权地址</a><br>
<img src="https://image.belier.cn/images/20190908205014.png" alt="" loading="lazy"></p>
</li>
<li>
<p>生成 ssl 证书</p>
</li>
</ol>
<pre><code class="language-sh">docker exec -it \
-e Ali_Key=&quot;your key&quot;\
-e Ali_Secret=&quot;your secret&quot; \
acme.sh --issue --dns dns_ali -d yourdomain.com \
-d *.yourdomain.com
</code></pre>
<h2 id="cloudflare-自动验证-dns-生成">Cloudflare 自动验证 DNS 生成</h2>
<ol>
<li>
<p>获取  Account ID<br>
在域名的主页（有折线图的页面），往下找<br>
<img src="https://image.belier.cn/images/20190908212220.png" alt="" loading="lazy"></p>
</li>
<li>
<p>创建 Api Token<br>
My Profile -&gt; Api Tokens<br>
<img src="https://image.belier.cn/images/20190908213353.png" alt="" loading="lazy"></p>
</li>
</ol>
<p>创建完成的页面获取，必须马上记录下来，后面不会再显示，否则只能重置<br>
<img src="https://image.belier.cn/images/20190908213336.png" alt="" loading="lazy"></p>
<ol start="3">
<li>生成 ssl 证书</li>
</ol>
<pre><code class="language-sh">docker exec -it \
-e CF_Token=&quot;your token&quot;\
-e CF_Account_ID=&quot;your account id&quot; \
acme.sh --issue --dns dns_cf -d yourdomain.com \
-d *.yourdomain.com
</code></pre>
<h2 id="将证书发布到-nginx-docker-容器中">将证书发布到 Nginx Docker 容器中</h2>
<ol>
<li>创建 Nginx 的容器的时候需要设置一个标签<br>
例如：</li>
</ol>
<pre><code class="language-sh">docker run  -it -d -p 80:80  --label=yourdomian.com   nginx
</code></pre>
<ol start="2">
<li>将证书发布到容器中</li>
</ol>
<pre><code class="language-sh">docker  exec \
-e DEPLOY_DOCKER_CONTAINER_LABEL=yourdomian.com \
-e DEPLOY_DOCKER_CONTAINER_KEY_FILE=/etc/nginx/ssl/yourdomian.com/key.pem \
-e DEPLOY_DOCKER_CONTAINER_CERT_FILE=&quot;/etc/nginx/ssl/yourdomian.com/cert.pem&quot; \
-e DEPLOY_DOCKER_CONTAINER_CA_FILE=&quot;/etc/nginx/ssl/yourdomian.com/ca.pem&quot; \ 
-e DEPLOY_DOCKER_CONTAINER_FULLCHAIN_FILE=&quot;/etc/nginx/ssl/yourdomian.com/full.pem&quot; \
-e DEPLOY_DOCKER_CONTAINER_RELOAD_CMD=&quot;service nginx force-reload&quot; \
acme.sh --deploy -d example.com  --deploy-hook docker
</code></pre>
<h2 id="注意">注意</h2>
<p>如果你有域名 yourdomain1.com yourdomain2.com 在两个不同的阿里云账号中，你又需要在一台服务器中生成两个域名的证书，只有最后一个生成的域名会自动续签成功，原因在于 acme.sh 目录下只有一个账号信息配置文件</p>
<pre><code>AUTO_UPGRADE='1'
SAVED_Ali_Key='your key'
SAVED_Ali_Secret='your secret'
USER_PATH='/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
</code></pre>
<p>后生成证书的账号就会覆盖之前的账号，如果两个域名在不同的服务商下，一个在阿里云，一个在 Cloudflare 就不会有问题，</p>
<p>解决方案：</p>
<ol>
<li>自己手动创建 account.conf 文件，让账号配置到两个文件中，但是默认的定时任务不知道新的 account.conf 文件的存在，必须再添加一个定时任务，并指定 account.conf 文件</li>
</ol>
<pre><code class="language-sh">24 0 * * * &quot;/root/.acme.sh&quot;/acme.sh --cron --home &quot;/root/.acme.sh&quot; --config-home &quot;/acme.sh&quot; --accountconf &quot;/acme.sh/account-new.conf&quot;
</code></pre>
<p>虽然最终都能续签成功，每次定时任务都有失败的情况</p>
<ol start="2">
<li>也可以创建多个容器来实现，会避免有失败的情况，但是会多消耗资源</li>
</ol>
<blockquote>
<p>以上方案均来自 <a href="https://github.com/Neilpang/acme.sh/issues/2055">issues</a>本人未使用或测试</p>
</blockquote>
]]></content>
    </entry>
</feed>