<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://blog.belier.cn</id>
    <title>Blog</title>
    <updated>2020-01-08T07:39:02.828Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://blog.belier.cn"/>
    <link rel="self" href="https://blog.belier.cn/atom.xml"/>
    <logo>https://blog.belier.cn/images/avatar.png</logo>
    <icon>https://blog.belier.cn/favicon.ico</icon>
    <rights>All rights reserved 2020, Blog</rights>
    <entry>
        <title type="html"><![CDATA[css 实现高度与宽度保持一致]]></title>
        <id>https://blog.belier.cn/post/83917392</id>
        <link href="https://blog.belier.cn/post/83917392">
        </link>
        <updated>2020-01-08T06:55:08.000Z</updated>
        <content type="html"><![CDATA[<h2 id="效果">效果</h2>
<p>可以改变浏览器窗口大小试试效果，高度始终和宽度保持一致</p>
<style>
    .box-666666{
        width: 10%;
        border: 1px solid #2D3748;
        height: 0;
        padding-bottom: 10%;
    }
</style>
<div class="box-666666"></div> 
<h2 id="代码">代码</h2>
<pre><code class="language-html">&lt;style&gt;
    .box{
        width: 10%;
        border: 1px solid #2D3748;
        height: 0;
        padding-bottom: 10%;
    }
&lt;/style&gt;
&lt;div class=&quot;box&quot;&gt;&lt;/div&gt; 
</code></pre>
<h2 id="原理">原理</h2>
<p>padding 是基于 width 计算的，让 padding 撑开元素就可以了</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[解决 electron 下载慢的问题]]></title>
        <id>https://blog.belier.cn/post/60333938</id>
        <link href="https://blog.belier.cn/post/60333938">
        </link>
        <updated>2020-01-03T09:03:33.000Z</updated>
        <content type="html"><![CDATA[<h2 id="分析">分析</h2>
<ol>
<li>electron 的 npm 包要先下载，默认从 https://registry.npmjs.org/ 下载<br>
方案：设置全局 npm 镜像</li>
<li>electron 的 npm 包会在安装完成后执行 <code>install.js</code> 会去下载编译好的 electron，默认从 github 下载<br>
方案：设置下载 electron 的镜像</li>
</ol>
<h2 id="设置全局-npm-镜像">设置全局 npm 镜像</h2>
<pre><code class="language-bash">yarn config set registry https://registry.npm.taobao.org/
npm config set registry https://registry.npm.taobao.org/
</code></pre>
<h2 id="设置下载-electron-的镜像">设置下载 electron 的镜像</h2>
<pre><code class="language-bash">yarn config set electron_mirror https://cdn.npm.taobao.org/dist/electron/
npm config set electron_mirror https://cdn.npm.taobao.org/dist/electron/
</code></pre>
<p>参考：<a href="https://github.com/electron/get/issues/120">Regression: taobao mirror does not have v in directory path</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[不同 Docker Compose 下通信]]></title>
        <id>https://blog.belier.cn/post/59969103</id>
        <link href="https://blog.belier.cn/post/59969103">
        </link>
        <updated>2019-12-31T01:32:42.000Z</updated>
        <content type="html"><![CDATA[<h2 id="分析">分析</h2>
<p>因为不同的 Docker Compose 会创建不同的网络，所以不同的 Docker Compose 之间默认是不能通信的，<strong>方案：加入同一个网络</strong></p>
<h2 id="创建自定义网络">创建自定义网络</h2>
<pre><code class="language-bash">docker network create app_net
</code></pre>
<h2 id="加入自定义网络">加入自定义网络</h2>
<pre><code class="language-yml">version: &quot;3&quot;
services:
  db:
    image: postgres

# 配置默认网络，不创建网络，加入 app_net
networks:
  default:
    external:
      name: app_net
</code></pre>
<p>参考：<a href="https://docs.docker.com/compose/networking/">Docker Compose Netowrking</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Centos7 安装 Docker Compose]]></title>
        <id>https://blog.belier.cn/post/38157117</id>
        <link href="https://blog.belier.cn/post/38157117">
        </link>
        <updated>2019-12-27T11:50:12.000Z</updated>
        <content type="html"><![CDATA[<h2 id="下载-docker-compose-二进制文件">下载 Docker Compose 二进制文件</h2>
<pre><code class="language-bash">curl -L &quot;https://github.com/docker/compose/releases/download/1.25.0/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose
</code></pre>
<h2 id="给与文件可执行权限">给与文件可执行权限</h2>
<pre><code class="language-bash">chmod +x /usr/local/bin/docker-compose
</code></pre>
<h2 id="检测是否可用">检测是否可用</h2>
<pre><code class="language-bash">docker-compose --version
</code></pre>
<p>参考：<a href="https://docs.docker.com/compose/install/#install-compose">Docker Compose Install</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[使用 Docker Compose 运行 Jenkins]]></title>
        <id>https://blog.belier.cn/post/55817706</id>
        <link href="https://blog.belier.cn/post/55817706">
        </link>
        <updated>2019-12-27T11:13:12.000Z</updated>
        <content type="html"><![CDATA[<h2 id="创建存放目录">创建存放目录</h2>
<pre><code class="language-bash">mkdir -p /usr/local/jenkins/jenkins_home
</code></pre>
<h2 id="创建-docker-composeyml-文件">创建 docker-compose.yml 文件</h2>
<p>在 <code>/usr/local/jenkins</code> 目录下创建</p>
<pre><code class="language-yml">version: '3'
services:
jenkins:
  user: root
  restart: always
  image: jenkins/jenkins:lts
  container_name: jenkins
  ports:
    - '3000:8080'
  volumes:
    - /usr/local/jenkins/jenkins_home/:/var/jenkins_home
    - /var/run/docker.sock:/var/run/docker.sock
    - /usr/bin/docker:/usr/bin/docker
    - /usr/local/bin/docker-compose:/usr/local/bin/docker-compose
</code></pre>
<h2 id="启动">启动</h2>
<pre><code class="language-bash">docker-compose up -d
</code></pre>
<h2 id="获取首次登陆密码">获取首次登陆密码</h2>
<pre><code class="language-bash">docker exec -it jenkins cat /var/jenkins_home/secrets/initialAdminPassword
</code></pre>
<h2 id="加速插件下载">加速插件下载</h2>
<p>默认速度感人，还容易失败<br>
参考：<a href="/post/e5hc2h3EA">Jenkins 使用镜像加速插件下载速度</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Jenkins 使用镜像加速插件下载速度]]></title>
        <id>https://blog.belier.cn/post/95619377</id>
        <link href="https://blog.belier.cn/post/95619377">
        </link>
        <updated>2019-12-27T08:40:14.000Z</updated>
        <content type="html"><![CDATA[<h2 id="安装-localization-zh-cn-plugin-插件">安装 localization-zh-cn-plugin 插件</h2>
<p>安装地址：<code>http://{your_jenkins_host}/pluginManager/available</code><br>
安装完后重启 jenkins</p>
<h2 id="配置更新中心地址">配置更新中心地址</h2>
<figure data-type="image" tabindex="1"><img src="https://blog.belier.cn/post-images/1577436279003.jpg" alt="" loading="lazy"></figure>
<p>参考：<a href="https://community.jenkins-zh.cn/t/jenkins/26">Jenkins 中文社区</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vagrant 创建 root 账号免密登录的 Centos7]]></title>
        <id>https://blog.belier.cn/post/65011775</id>
        <link href="https://blog.belier.cn/post/65011775">
        </link>
        <updated>2019-12-26T11:37:04.000Z</updated>
        <content type="html"><![CDATA[<h2 id="分析">分析</h2>
<p>vagrant 默认是使用 vagrant 用户免密登录的，所以只要把 vagrant 用户免密登录的公钥拷贝到 root 用户下就可以了</p>
<h2 id="创建虚拟机创建成功后执行的脚本">创建虚拟机创建成功后执行的脚本</h2>
<p>在 Vagrantfile 目录下创建 setup.sh</p>
<pre><code class="language-bash">#!/bin/bash

#安装 expect 用于切换 root 用户
sudo yum install -y expect

#创建拷贝 authorized_keys 脚本
sh_str=&quot;#!/bin/sh\ndata=\$(cat /home/vagrant/.ssh/authorized_keys)\nmkdir -p /root/.ssh\necho \${data} &gt; /root/.ssh/authorized_keys&quot;
sudo echo -e ${sh_str} &gt; /home/vagrant/root.sh
sudo chmod +x /home/vagrant/root.sh

#切换到 root 用户执行拷贝 authorized_keys
expect -c &quot;
spawn su root
expect \&quot;Password:\&quot;
send \&quot;vagrant\n\&quot;
expect &quot;#&quot;
send \&quot;sh /home/vagrant/root.sh\n\&quot;
expect &quot;#&quot;
send \&quot;rm -f /home/vagrant/root.sh\n\&quot;
&quot;
</code></pre>
<h2 id="配置-vagrantfile">配置 Vagrantfile</h2>
<pre><code class="language-ruby"># -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.require_version &quot;&gt;= 1.6.0&quot;

Vagrant.configure(2) do |config|
# 配置创建成功后执行的脚本（只在第一次创建成功后执行），以上省略
config.vm.provision &quot;shell&quot;, path: &quot;./setup.sh&quot;
end
</code></pre>
<h2 id="root-用户免密登录">root 用户免密登录</h2>
<p>使用 <code>.vagrant\machines\default\virtualbox\private_key</code> 私钥登录即可</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[使用 Dokcer 运行 Nginx]]></title>
        <id>https://blog.belier.cn/post/89965782</id>
        <link href="https://blog.belier.cn/post/89965782">
        </link>
        <updated>2019-12-26T02:36:19.000Z</updated>
        <content type="html"><![CDATA[<h2 id="创建用于放-nginx-配置文件的目录">创建用于放 nginx 配置文件的目录</h2>
<pre><code class="language-bash"># 顺带创建一个存放证书的目录
mkdir -p /usr/local/nginx/ssl
</code></pre>
<h2 id="拷贝出默认配置文件">拷贝出默认配置文件</h2>
<ol>
<li>简单运行一个 nginx 容器，拷贝配置文件</li>
</ol>
<pre><code class="language-bash">docker run -d  --name nginx nginx
docker cp nginx:/etc/nginx/nginx.conf /usr/local/nginx/nginx.conf
docker cp nginx:/etc/nginx/conf.d /usr/local/nginx/conf.d
</code></pre>
<ol start="2">
<li>销毁 nginx 容器</li>
</ol>
<pre><code class="language-bash">docker rm -f nginx
</code></pre>
<h2 id="运行-nginx-容器">运行 nginx 容器</h2>
<pre><code class="language-bash">docker run -d -p 80:80 -p 443:443 --name nginx \
-v /usr/local/nginx/nginx.conf:/etc/nginx/nginx.conf \
-v /usr/local/nginx/conf.d:/etc/nginx/conf.d \
-v /usr/local/nginx/ssl/:/etc/nginx/ssl nginx
</code></pre>
<h2 id="防火墙放行-80-443-端口">防火墙放行 80 443 端口</h2>
<p>这里以 firewall 防火墙为例</p>
<pre><code class="language-bash">firewall-cmd --permanent --zone=public --add-port=80/tcp 
firewall-cmd --permanent --zone=public --add-port=443/tcp 
# 重新加载防护墙配置
firewall-cmd --reload
</code></pre>
<h2 id="测试">测试</h2>
<p>访问主机的ip，查看是否有 nginx 的欢迎页面</p>
<h2 id="使用-docker-compose">使用 Docker Compose</h2>
<p>在 <code>/usr/local/nginx</code> 目录下创建 docker-compose.yml</p>
<pre><code class="language-yml">version: '3'
services:
  nginx:
    restart: always
    image: nginx
    container_name: nginx
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - /usr/local/nginx/nginx.conf:/etc/nginx/nginx.conf
      - /usr/local/nginx/conf.d:/etc/nginx/conf.d
      - /usr/local/nginx/ssl/:/etc/nginx/ssl
</code></pre>
<p>启动：<code>docker-compose up -d</code></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Centos7 安装 netstat]]></title>
        <id>https://blog.belier.cn/post/52263335</id>
        <link href="https://blog.belier.cn/post/52263335">
        </link>
        <updated>2019-12-26T02:26:03.000Z</updated>
        <content type="html"><![CDATA[<p>安装</p>
<pre><code class="language-bash">yum install -y net-tools
</code></pre>
<p>net-tools 包含如下命令</p>
<pre><code class="language-bash">ifconfig
route
netstat
arp
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[firewall 防火墙常用命令]]></title>
        <id>https://blog.belier.cn/post/12802297</id>
        <link href="https://blog.belier.cn/post/12802297">
        </link>
        <updated>2019-12-26T02:20:25.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li>开启防火墙</li>
</ul>
<pre><code class="language-bash">systemctl start firewalld.service
</code></pre>
<ul>
<li>关闭防火墙</li>
</ul>
<pre><code class="language-bash">systemctl stop firewalld.service
</code></pre>
<ul>
<li>开机自动启动</li>
</ul>
<pre><code class="language-bash">systemctl enable firewalld.service
</code></pre>
<ul>
<li>关闭开机自动启动</li>
</ul>
<pre><code class="language-bash">systemctl disable firewalld.service
</code></pre>
<ul>
<li>查看状态</li>
</ul>
<pre><code class="language-bash">systemctl status firewalld
</code></pre>
<ul>
<li>重新加载配置</li>
</ul>
<pre><code class="language-bash">firewall-cmd --reload
</code></pre>
<ul>
<li>临时启用某个服务</li>
</ul>
<pre><code class="language-bash">firewall-cmd --zone=public --add-service=https
</code></pre>
<ul>
<li>永久启用某个服务</li>
</ul>
<pre><code class="language-bash">firewall-cmd --permanent --zone=public --add-service=https
</code></pre>
<ul>
<li>临时开启某个端口</li>
</ul>
<pre><code class="language-bash">firewall-cmd  --zone=public --add-port=8080/tcp 
</code></pre>
<ul>
<li>永久开启某个端口</li>
</ul>
<pre><code class="language-bash">firewall-cmd --permanent --zone=public --add-port=8080/tcp 
</code></pre>
<ul>
<li>手动修改服务和端口配置</li>
</ul>
<pre><code class="language-bash">vi  /etc/firewalld/zones/public.xml
</code></pre>
]]></content>
    </entry>
</feed>