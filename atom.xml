<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://blog.belier.cn</id>
    <title>Blog</title>
    <updated>2020-01-02T09:08:29.756Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://blog.belier.cn"/>
    <link rel="self" href="https://blog.belier.cn/atom.xml"/>
    <logo>https://blog.belier.cn/images/avatar.png</logo>
    <icon>https://blog.belier.cn/favicon.ico</icon>
    <rights>All rights reserved 2020, Blog</rights>
    <entry>
        <title type="html"><![CDATA[不同 Docker Compose 下通信]]></title>
        <id>https://blog.belier.cn/post/599691036621</id>
        <link href="https://blog.belier.cn/post/599691036621">
        </link>
        <updated>2019-12-31T01:32:42.000Z</updated>
        <content type="html"><![CDATA[<h2 id="分析">分析</h2>
<p>因为不同的 Docker Compose 会创建不同的网络，所以不同的 Docker Compose 之间默认是不能通信的，<strong>方案：加入同一个网络</strong></p>
<h2 id="创建自定义网络">创建自定义网络</h2>
<pre><code class="language-bash">docker network create app_net
</code></pre>
<h2 id="加入自定义网络">加入自定义网络</h2>
<pre><code class="language-yml">version: &quot;3&quot;
services:
  db:
    image: postgres

# 配置默认网络，不创建网络，加入 app_net
networks:
  default:
    external:
      name: app_net
</code></pre>
<p>参考：<a href="https://docs.docker.com/compose/networking/">Docker Compose Netowrking</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Centos7 安装 Docker Compose]]></title>
        <id>https://blog.belier.cn/post/381571170993</id>
        <link href="https://blog.belier.cn/post/381571170993">
        </link>
        <updated>2019-12-27T11:50:12.000Z</updated>
        <content type="html"><![CDATA[<h2 id="下载-docker-compose-二进制文件">下载 Docker Compose 二进制文件</h2>
<pre><code class="language-bash">curl -L &quot;https://github.com/docker/compose/releases/download/1.25.0/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose
</code></pre>
<h2 id="给与文件可执行权限">给与文件可执行权限</h2>
<pre><code class="language-bash">chmod +x /usr/local/bin/docker-compose
</code></pre>
<h2 id="检测是否可用">检测是否可用</h2>
<pre><code class="language-bash">docker-compose --version
</code></pre>
<p>参考：<a href="https://docs.docker.com/compose/install/#install-compose">Docker Compose Install</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[使用 Docker Compose 运行 Jenkins]]></title>
        <id>https://blog.belier.cn/post/558177060969</id>
        <link href="https://blog.belier.cn/post/558177060969">
        </link>
        <updated>2019-12-27T11:13:12.000Z</updated>
        <content type="html"><![CDATA[<h2 id="创建存放目录">创建存放目录</h2>
<pre><code class="language-bash">mkdir -p /usr/local/jenkins/jenkins_home
</code></pre>
<h2 id="创建-docker-composeyml-文件">创建 docker-compose.yml 文件</h2>
<p>在 <code>/usr/local/jenkins</code> 目录下创建</p>
<pre><code class="language-yml">version: '3'
services:
jenkins:
  user: root
  restart: always
  image: jenkins/jenkins:lts
  container_name: jenkins
  ports:
    - '3000:8080'
  volumes:
    - /usr/local/jenkins/jenkins_home/:/var/jenkins_home
    - /var/run/docker.sock:/var/run/docker.sock
    - /usr/bin/docker:/usr/bin/docker
    - /usr/local/bin/docker-compose:/usr/local/bin/docker-compose
</code></pre>
<h2 id="启动">启动</h2>
<pre><code class="language-bash">docker-compose up -d
</code></pre>
<h2 id="获取首次登陆密码">获取首次登陆密码</h2>
<pre><code class="language-bash">docker exec -it jenkins cat /var/jenkins_home/secrets/initialAdminPassword
</code></pre>
<h2 id="加速插件下载">加速插件下载</h2>
<p>默认速度感人，还容易失败<br>
参考：<a href="/post/e5hc2h3EA">Jenkins 使用镜像加速插件下载速度</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Jenkins 使用镜像加速插件下载速度]]></title>
        <id>https://blog.belier.cn/post/956193773516</id>
        <link href="https://blog.belier.cn/post/956193773516">
        </link>
        <updated>2019-12-27T08:40:14.000Z</updated>
        <content type="html"><![CDATA[<h2 id="安装-localization-zh-cn-plugin-插件">安装 localization-zh-cn-plugin 插件</h2>
<p>安装地址：<code>http://{your_jenkins_host}/pluginManager/available</code><br>
安装完后重启 jenkins</p>
<h2 id="配置更新中心地址">配置更新中心地址</h2>
<figure data-type="image" tabindex="1"><img src="https://blog.belier.cn/post-images/1577436279003.jpg" alt="" loading="lazy"></figure>
<p>参考：<a href="https://community.jenkins-zh.cn/t/jenkins/26">Jenkins 中文社区</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vagrant 创建 root 账号免密登录的 Centos7]]></title>
        <id>https://blog.belier.cn/post/650117758180</id>
        <link href="https://blog.belier.cn/post/650117758180">
        </link>
        <updated>2019-12-26T11:37:04.000Z</updated>
        <content type="html"><![CDATA[<h2 id="分析">分析</h2>
<p>vagrant 默认是使用 vagrant 用户免密登录的，所以只要把 vagrant 用户免密登录的公钥拷贝到 root 用户下就可以了</p>
<h2 id="创建虚拟机创建成功后执行的脚本">创建虚拟机创建成功后执行的脚本</h2>
<p>在 Vagrantfile 目录下创建 setup.sh</p>
<pre><code class="language-bash">#!/bin/bash

#安装 expect 用于切换 root 用户
sudo yum install -y expect

#创建拷贝 authorized_keys 脚本
sh_str=&quot;#!/bin/sh\ndata=\$(cat /home/vagrant/.ssh/authorized_keys)\nmkdir -p /root/.ssh\necho \${data} &gt; /root/.ssh/authorized_keys&quot;
sudo echo -e ${sh_str} &gt; /home/vagrant/root.sh
sudo chmod +x /home/vagrant/root.sh

#切换到 root 用户执行拷贝 authorized_keys
expect -c &quot;
spawn su root
expect \&quot;Password:\&quot;
send \&quot;vagrant\n\&quot;
expect &quot;#&quot;
send \&quot;sh /home/vagrant/root.sh\n\&quot;
expect &quot;#&quot;
send \&quot;rm -f /home/vagrant/root.sh\n\&quot;
&quot;
</code></pre>
<h2 id="配置-vagrantfile">配置 Vagrantfile</h2>
<pre><code class="language-ruby"># -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.require_version &quot;&gt;= 1.6.0&quot;

Vagrant.configure(2) do |config|
# 配置创建成功后执行的脚本（只在第一次创建成功后执行），以上省略
config.vm.provision &quot;shell&quot;, path: &quot;./setup.sh&quot;
end
</code></pre>
<h2 id="root-用户免密登录">root 用户免密登录</h2>
<p>使用 <code>.vagrant\machines\default\virtualbox\private_key</code> 私钥登录即可</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[使用 Dokcer 运行 Nginx]]></title>
        <id>https://blog.belier.cn/post/899657823062</id>
        <link href="https://blog.belier.cn/post/899657823062">
        </link>
        <updated>2019-12-26T02:36:19.000Z</updated>
        <content type="html"><![CDATA[<h2 id="创建用于放-nginx-配置文件的目录">创建用于放 nginx 配置文件的目录</h2>
<pre><code class="language-bash"># 顺带创建一个存放证书的目录
mkdir -p /usr/local/nginx/ssl
</code></pre>
<h2 id="拷贝出默认配置文件">拷贝出默认配置文件</h2>
<ol>
<li>简单运行一个 nginx 容器，拷贝配置文件</li>
</ol>
<pre><code class="language-bash">docker run -d  --name nginx nginx
docker cp nginx:/etc/nginx/nginx.conf /usr/local/nginx/nginx.conf
docker cp nginx:/etc/nginx/conf.d /usr/local/nginx/conf.d
</code></pre>
<ol start="2">
<li>销毁 nginx 容器</li>
</ol>
<pre><code class="language-bash">docker rm -f nginx
</code></pre>
<h2 id="运行-nginx-容器">运行 nginx 容器</h2>
<pre><code class="language-bash">docker run -d -p 80:80 -p 443:443 --name nginx \
-v /usr/local/nginx/nginx.conf:/etc/nginx/nginx.conf \
-v /usr/local/nginx/conf.d:/etc/nginx/conf.d \
-v /usr/local/nginx/ssl/:/etc/nginx/ssl nginx
</code></pre>
<h2 id="防火墙放行-80-443-端口">防火墙放行 80 443 端口</h2>
<p>这里以 firewall 防火墙为例</p>
<pre><code class="language-bash">firewall-cmd --permanent --zone=public --add-port=80/tcp 
firewall-cmd --permanent --zone=public --add-port=443/tcp 
# 重新加载防护墙配置
firewall-cmd --reload
</code></pre>
<h2 id="测试">测试</h2>
<p>访问主机的ip，查看是否有 nginx 的欢迎页面</p>
<h2 id="使用-docker-compose">使用 Docker Compose</h2>
<p>在 <code>/usr/local/nginx</code> 目录下创建 docker-compose.yml</p>
<pre><code class="language-yml">version: '3'
services:
  nginx:
    restart: always
    image: nginx
    container_name: nginx
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - /usr/local/nginx/nginx.conf:/etc/nginx/nginx.conf
      - /usr/local/nginx/conf.d:/etc/nginx/conf.d
      - /usr/local/nginx/ssl/:/etc/nginx/ssl
</code></pre>
<p>启动：<code>docker-compose up -d</code></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Centos7 安装 netstat]]></title>
        <id>https://blog.belier.cn/post/522633351718</id>
        <link href="https://blog.belier.cn/post/522633351718">
        </link>
        <updated>2019-12-26T02:26:03.000Z</updated>
        <content type="html"><![CDATA[<p>安装</p>
<pre><code class="language-bash">yum install -y net-tools
</code></pre>
<p>net-tools 包含如下命令</p>
<pre><code class="language-bash">ifconfig
route
netstat
arp
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[firewall 防火墙常用命令]]></title>
        <id>https://blog.belier.cn/post/128022971306</id>
        <link href="https://blog.belier.cn/post/128022971306">
        </link>
        <updated>2019-12-26T02:20:25.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li>开启防火墙</li>
</ul>
<pre><code class="language-bash">systemctl start firewalld.service
</code></pre>
<ul>
<li>关闭防火墙</li>
</ul>
<pre><code class="language-bash">systemctl stop firewalld.service
</code></pre>
<ul>
<li>开机自动启动</li>
</ul>
<pre><code class="language-bash">systemctl enable firewalld.service
</code></pre>
<ul>
<li>关闭开机自动启动</li>
</ul>
<pre><code class="language-bash">systemctl disable firewalld.service
</code></pre>
<ul>
<li>查看状态</li>
</ul>
<pre><code class="language-bash">systemctl status firewalld
</code></pre>
<ul>
<li>重新加载配置</li>
</ul>
<pre><code class="language-bash">firewall-cmd --reload
</code></pre>
<ul>
<li>临时启用某个服务</li>
</ul>
<pre><code class="language-bash">firewall-cmd --zone=public --add-service=https
</code></pre>
<ul>
<li>永久启用某个服务</li>
</ul>
<pre><code class="language-bash">firewall-cmd --permanent --zone=public --add-service=https
</code></pre>
<ul>
<li>临时开启某个端口</li>
</ul>
<pre><code class="language-bash">firewall-cmd  --zone=public --add-port=8080/tcp 
</code></pre>
<ul>
<li>永久开启某个端口</li>
</ul>
<pre><code class="language-bash">firewall-cmd --permanent --zone=public --add-port=8080/tcp 
</code></pre>
<ul>
<li>手动修改服务和端口配置</li>
</ul>
<pre><code class="language-bash">vi  /etc/firewalld/zones/public.xml
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Centos7 开启密码登录和 root 用户远程登录]]></title>
        <id>https://blog.belier.cn/post/755730371983</id>
        <link href="https://blog.belier.cn/post/755730371983">
        </link>
        <updated>2019-12-26T01:31:22.000Z</updated>
        <content type="html"><![CDATA[<h2 id="开启密码登录">开启密码登录</h2>
<ol>
<li>编辑配置文件<br>
vi /etc/ssh/sshd_config<pre><code class="language-bash">PasswordAuthentication yes
</code></pre>
</li>
<li>重启 SSH 服务<pre><code class="language-bash">systemctl restart sshd
</code></pre>
</li>
</ol>
<h2 id="开启-root-用户远程登录">开启 root 用户远程登录</h2>
<ol>
<li>编辑配置文件<br>
vi /etc/ssh/sshd_config<pre><code class="language-bash">PermitRootLogin yes
</code></pre>
</li>
<li>重启 SSH 服务<pre><code class="language-bash">systemctl restart sshd
</code></pre>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Linux 学习之 SSH]]></title>
        <id>https://blog.belier.cn/post/833355996238</id>
        <link href="https://blog.belier.cn/post/833355996238">
        </link>
        <updated>2019-09-11T15:07:12.000Z</updated>
        <content type="html"><![CDATA[<h2 id="什么是-ssh">什么是 SSH</h2>
<p>Secure Shell（安全外壳协议，简称SSH）是一种加密的网络传输协议，可在不安全的网络中为网络服务提供安全的传输环境。SSH通过在网络中创建安全隧道来实现SSH客户端与服务器之间的连接<br>
来自维基百科 <a href="https://zh.wikipedia.org/wiki/Secure_Shell">Secure Shell (SSH)</a></p>
<h2 id="ssh-服务端">SSH 服务端</h2>
<p>SSH 服务端就是一个守护进程，后台运行，响应客户端的请求</p>
<ul>
<li>centos 安装：</li>
</ul>
<pre><code class="language-sh">yum install -y openssh-server
</code></pre>
<blockquote>
<p>一般都会默认安装的，图形化的 linux 系统一般没有</p>
</blockquote>
<ul>
<li>服务相关命令</li>
</ul>
<pre><code>systemctl start sshd      #启动
systemctl stop sshd      #关闭
systemctl restart sshd   #重启
systemctl enable sshd   #开机自启
systemctl disable sshd  #关闭开机自启
systemctl status sshd    #查看状态
</code></pre>
<h2 id="ssh-客户端">SSH 客户端</h2>
<ul>
<li>centos 安装</li>
</ul>
<pre><code>yum install -y openssh-client
</code></pre>
<blockquote>
<p>安装了服务端，默认就会安装客户端</p>
</blockquote>
<ul>
<li>windows 下的 SSH 客户端</li>
</ul>
<p>securecrt xshell ... 应用程序，都是可视化操作，比较简单</p>
<h2 id="连接服务端">连接服务端</h2>
<h3 id="密码登录">密码登录</h3>
<pre><code class="language-sh">ssh user@host -p port
# 或者
ssh -i ~/.ssh/id_rsa -p port -l user host
</code></pre>
<p>user ：用户名，例如：root<br>
host : 主机地址，例如：192.168.0.100<br>
-p : 端口，不指定默认 22<br>
-i : 证书文件，默认 ~/.ssh/id_rsa ，如果用免密登录才需要<br>
-l : 用户名</p>
<h3 id="免密登录">免密登录</h3>
<p>假设 A 要访问 B ,就得在 A 服务器上生成一对秘钥，将生成的公钥配置到 B 服务器</p>
<ul>
<li>生成秘钥（私钥+公钥）<br>
window 可以使用软件生成，这里说说 linux 生成</li>
</ul>
<pre><code># 在当前目录生成，这里在 ~/.ssh 目录
ssh-keygen –t rsa -f belier -P &quot;&quot;
</code></pre>
<p>-t : 使用什么加密方式，默认 rsa，一般有 rsa dsa esdsa ...<br>
-f : 设置文件名称，默认文件名：id_rsa，如果不指定会提示输入，不输入直接回车还是会使用默认文件名<br>
-P : 秘钥的密码，&quot;&quot; 就是不设置密码</p>
<ul>
<li>配置公钥<br>
将生 ~/.ssh/{name}.pub 拷贝到 B 服务器的 ~/.ssh/authorized_keys 文件中<br>
输出公钥内容</li>
</ul>
<pre><code>cat ~/.ssh/{name}.pub
</code></pre>
<p>如果没有  ~/.ssh/authorized_keys 文件，使用如下命令创建</p>
<pre><code>touch ~/.ssh/authorized_keys
</code></pre>
<p>配置多个公钥，可以换行进行分割</p>
<blockquote>
<p>~ 是当前用户的根目录，root 用户的根目录就是 /root ，如果想使用 root 用户免密登录，B 服务器就得切换到 root 用户</p>
</blockquote>
<ul>
<li>使用免密登录</li>
</ul>
<pre><code class="language-sh"># 我的秘钥不是默认名称，需要指定私钥文件
ssh root@192.168.10.100 -i ~/.ssh/belier
</code></pre>
<p>第一次免密登录有一个确认提示：</p>
<pre><code class="language-sh">The authenticity of host '192.168.10.100 (192.168.10.100)' can't be established.
ECDSA key fingerprint is SHA256:F1wrt2fjlZuDDTuUeNnuB10m4FifT6zQdA6moSIbQLQ.
ECDSA key fingerprint is MD5:29:ed:82:6e:3b:7c:63:86:48:91:75:df:2e:91:90:c2.
Are you sure you want to continue connecting (yes/no)?
</code></pre>
<p>主要是让你确认远程服务器信息，避免中间人劫持，发现问题就 no ,不连接</p>
<p>如果出现问题：</p>
<pre><code class="language-sh">Permission denied (publickey,gssapi-keyex,gssapi-with-mic).
</code></pre>
<p>方案：</p>
<pre><code># 编辑 /etc/ssh/sshd_config 文件
RSAAuthentication yes
PubkeyAuthentication yes
# 设置 权限
chmod 700 ~/.ssh
chmod 600 ~/.ssh/authorized_keys 
</code></pre>
<h3 id="快捷登录">快捷登录</h3>
<p>上面的登录方式要输一大串命令，我们可以通过配置文件的方式，记录登录信息，通过设置别名简化命令</p>
<p>用户配置文件，放置在 ~/.ssh/config，只有当前用户能使用<br>
系统配置文件，放置在 /etc/ssh/ssh_config，都能使用（区别于 /etc/ssh/sshd_config）</p>
<p>这里我使用 ~/.ssh/config</p>
<pre><code># 设置的别名
Host server-b
  # 主机地址
  HostName 192.168.10.100
  # 用户名
  User root
  # 私钥地址
  IdentityFile ~/.ssh/belier
  # 端口 
  Port 22 
</code></pre>
<p>使用：</p>
<pre><code class="language-sh"># 现在就简洁多了
ssh server-b
</code></pre>
<h2 id="端口更改">端口更改</h2>
<p>为了更好的保证服务器的安全性，修改默认端口还是有必要的，其它的服务最好也修改掉默认端口</p>
<p>编辑 /etc/ssh/sshd_config 文件</p>
<pre><code>Port 22
Port 2233
</code></pre>
<blockquote>
<p>最好先把默认端口保留，避免新的端口没有配置好，导致后面连不上，等尝试能正常连接了，再将默认的端口删除</p>
</blockquote>
<p>重启服务：</p>
<pre><code>systemctl restart sshd
</code></pre>
<p>端口放行：<br>
这里以 firewall 防火墙为例</p>
<pre><code># 开放端口
firewall-cmd --permanent --zone=public --add-port=2233/tcp 
# 重启加载防火墙配置
firewall-cmd --reload
</code></pre>
]]></content>
    </entry>
</feed>